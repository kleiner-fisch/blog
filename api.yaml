openapi: 3.0.0
info:
  version: 1.0.0
  title: Blogging API
  description: A simple API to learn and showcase some Java backend developers skills
servers:
  - url: https://example-blog.tw/v1

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    post:
      type: object 
      required:
        - post_id
        - title
        - content
        - username
        - date
      properties:
        post_id:
          type: integer
        username:
          type: string
        title:
          type: string
        content:
          type: string   
        date: 
          type: string 
    comment:
      type: object 
      required:
        - comment_id
        - author
        - content
        - date
      properties:
        comment_id:
          type: integer
        date: 
          type: string
        author:
          type: string
        content:
          type: string  
  responses:
    400Error:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object 
            properties:
              message:
                type: string
    200Success:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties: 
              id:
                type: integer
  parameters:
    user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
    post_id:
      name: post_id
      in: path
      required: true
      schema:
        type: integer
    comment_id:
      name: comment_id
      in: path
      required: true
      schema:
        type: integer
    by_author:
      name: author
      in: query
      description: Only retrieves items from the author
      schema:
        type: string
    page_limit:
      name: limit
      in: query
      description: Limits the number of items on a page
      schema:
        type: integer
    page_offset:
      name: offset
      in: query
      description: Specifies the page number of the artists to be displayed
      schema:
        type: integer
      
security:
  - BasicAuth: []

paths:
  /users:
    post:
      description: Creates a new user      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              required:
                - username
                - mail
                - password
              properties:
                password:
                  type: string
                username:
                  type: string
                mail:
                  type: string    
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '400':
          $ref: '#/components/responses/400Error'
  /users/{user_id}:
    get:
      description: Obtain information about an user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: Successfully retrieved the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  username:
                    type: string
                  mail:
                    type: string
        '400':
          $ref: '#/components/responses/400Error'
    put:
      description: Update information about an user
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                password:
                  type: string
                username:
                  type: string
                mail:
                  type: string   
      responses:
        '200':
          description: Successfully updated the user with the provided data
        '400':
          $ref: '#/components/responses/400Error'
    delete:
      description: Delete an user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: Successfully deleted the user
        '400':
          $ref: '#/components/responses/400Error'
  /posts:
    get:
      description: Obtain a list of posts
      parameters:
        - $ref: '#/components/parameters/post_id'
        - $ref: '#/components/parameters/page_limit'
        - $ref: '#/components/parameters/page_offset'
        - $ref: '#/components/parameters/by_author'
      responses:
        '200':
          description: Successfully retrieved the posts
          content:
            application/json:
              schema:
                type: array
                items:                 
                  $ref: '#/components/schemas/post'
        '400':
          $ref: '#/components/responses/400Error'
    post:
      description: Creates a new post    
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post'
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '400':
          $ref: '#/components/responses/400Error'
  /posts/{post_id}:
    get:
      description: Obtain information about a post
      parameters:
        - $ref: '#/components/parameters/post_id'
      responses:
        '200':
          description: Successfully retrieved the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '400':
          $ref: '#/components/responses/400Error'
    delete:
      description: Delete an user
      parameters:
        - $ref: '#/components/parameters/post_id'
      responses:
        '200':
          description: Successfully deleted the post
        '400':
          $ref: '#/components/responses/400Error'
  /posts/{post_id}/comments:
    post:
      description: Creates a new comment 
      parameters:
        - $ref: '#/components/parameters/post_id'   
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/comment'
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '400':
          $ref: '#/components/responses/400Error'
    get:
      description: Obtain comments of a post
      parameters:
        - $ref: '#/components/parameters/post_id'
        - $ref: '#/components/parameters/page_limit'
        - $ref: '#/components/parameters/page_offset'
        - $ref: '#/components/parameters/by_author'
      responses:
        '200':
          description: Successfully retrieved the comments
          content:
            application/json:
              schema:
                type: array
                items:                 
                  $ref: '#/components/schemas/comment'
        '400':
          $ref: '#/components/responses/400Error'
  /posts/{post_id}/comments/{comment_id}:
    post:
      description: Get a specific comment 
      parameters:
        - $ref: '#/components/parameters/post_id'   
        - $ref: '#/components/parameters/comment_id'   
      responses:
        '200':
          description: Successfully retrieved the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          $ref: '#/components/responses/400Error'
    delete:
      description: Delete a comment 
      parameters:
        - $ref: '#/components/parameters/post_id'   
        - $ref: '#/components/parameters/comment_id'   
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '400':
          $ref: '#/components/responses/400Error'